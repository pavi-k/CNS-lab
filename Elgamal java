import java.util.*;
import java.lang.*;
import java.math.*;
public class elgamal
{
	public static BigInteger power(BigInteger a,int b,BigInteger p)
	{
		if(b==1)
			return a;
		else
			return (a.pow(b)).mod(p);
	}
	public static void keygen()
	{
	Scanner sc=new Scanner(System.in);
 int b,i,xa;
 BigInteger x,y,ka,kb,q,a;
 System.out.println("Enter q");
 q=sc.nextBigInteger();
 System.out.println("Enter a");
 a=sc.nextBigInteger();
 System.out.println("Enter xa");
 xa=sc.nextInt();
 x=power(a,xa,q);
 System.out.println("Enter k");
 b=sc.nextInt();
 y=power(x,b,q);
 BigInteger c1,c2,m;
 c1=power(a,b,q);
 System.out.println("Enter M");
 m=sc.nextBigInteger();
 c2=(m.multiply(y)).mod(q);
 System.out.println("Alice:");
 System.out.println("K : "+y);
 System.out.println("C1 : "+c1);
 System.out.println("C2 : "+c2);
 ka=power(c1,xa,q);
 kb=ka.modInverse(q);
 BigInteger m2;
 m2=(c2.multiply(kb)).mod(q);
 System.out.println("Bob:");
 System.out.println("K : "+ka);
System.out.println("K inv : "+kb);
 System.out.println("M : "+m2);
	}
	public static void main(String[] args)
	{
	keygen();
	}
}
ALGO


Bob generates public and private key :
Bob chooses a very large number q and a cyclic group Fq.


From the cyclic group Fq, he choose any element g and an element such that gcd(a, q) = 1.
Then he computes h = ga.
Bob publishes F, h = ga, q and g as his public key and retains a as private key.
Alice encrypts data using Bob’s public key :
Alice selects an element k from cyclic group F
such that gcd(k, q) = 1.
Then she computes p = gk  and s = hk  = gak.
She multiples s with M.
Then she sends (p, M*s) = (gk, M*s).
Bob decrypts the message :
Bob calculates s′ = pa  = gak.
He divides M*s by s′ to obtain M as s = s′.
