import java.util.Scanner;

public class RailFenceCipher {
	int numRails;

	public RailFenceCipher(int numRails) {
		this.numRails = numRails;
	}



	String getDecryptedData(String data) {
		char[] decrypted = new char[data.length()];
		int n = 0;
		for(int k = 0 ; k < numRails; k ++) {
			int index = k;
			boolean down = true;
			while(index < data.length() ) {
				//System.out.println(k + " " + index+ " "+ n );
				decrypted[index] = data.charAt(n++);
				
				if(k == 0 || k == numRails - 1) {
					index = index + 2 * (numRails - 1);
				}
				else if(down) {
					index = index +  2 * (numRails - k - 1);
					down = !down;
				}
				else {
					index = index + 2 * k;
					down = !down;
				}
			}
		}
		return new String(decrypted);
	}
	
	
	String getEncryptedData(String data) {
		char[] encrypted = new char[data.length()];
		int n = 0;
		
		
		for(int k = 0 ; k < numRails; k ++) {
			int index = k;
			boolean down = true;
			while(index < data.length() ) {
				//System.out.println(k + " " + index+ " "+ n );
				encrypted[n++] = data.charAt(index);
				
				if(k == 0 || k == numRails - 1) {
					index = index + 2 * (numRails - 1);
				}
				else if(down) {
					index = index +  2 * (numRails - k - 1);
					down = !down;
				}
				else {
					index = index + 2 * k;
					down = !down;
				}
			}
		}
		return new String(encrypted);
	}
	
	//alternate way not efficient
	String getEncryptedData2(String data) {

		int len = data.length();
		StringBuffer[] sb = new StringBuffer[numRails];

		for (int i = 0; i < numRails; i++) {
			sb[i] = new StringBuffer();
		}

		int index = 0;
		int direction = 1;

		for (int i = 0; i < data.length(); i++) {

			sb[index].append(data.charAt(i));
			index = index + direction;

			if (index == 0) {
				direction = 1;
			} else if (index == numRails) {
				if(index == 2) {// base case for cipher of length 2
					index = 0;
				}else {
					direction = -1;
					index = numRails -2;					
				}
			}

		}

		for (int i = 1; i < numRails; i++) {
			sb[0].append(sb[i].toString());
		}

		return sb[0].toString();
	}

	public static void main(String[] args) {
                 Scanner a= new Scanner(System.in);
		System.out.println("Enter the plain text");
                String data=a.nextLine(); 
                System.out.println("Enter rails");
                 int n=a.nextInt();
		
		
		RailFenceCipher railFenceCipher = new RailFenceCipher(n);
		
		String encrypted =railFenceCipher.getEncryptedData(data);
		System.out.println(encrypted);
		
		String decrypted = railFenceCipher.getDecryptedData(encrypted);
		System.out.println(decrypted);
		

	}
}

ALGORITHM

In the rail fence cipher, the plain-text is written downwards and diagonally on successive rails of an imaginary fence.
When we reach the bottom rail, we traverse upwards moving diagonally, after reaching
the top rail, the direction is changed again. Thus, the alphabets of the message are written in a zig-zag manner.
After each alphabet has been written, the individual rows are combined to obtain the cipher-text.
The number of columns in the rail fence cipher remains equal to the length of plain-text message. And the key corresponds to the number of rails.
Hence, a rail matrix can be constructed accordingly. Once weâ€™ve got the matrix we can
figure-out the spots where texts should be placed (using the same way of moving diagonally up and down alternatively).


Then, we fill the cipher-text row wise. After filling it, we traverse the matrix in zig-zag manner to obtain the original text.

